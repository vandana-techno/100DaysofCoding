Question link - https://leetcode.com/problems/valid-parentheses/

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

1. Open brackets must be closed by the same type of brackets.
2. Open brackets must be closed in the correct order.
3. Every close bracket has a corresponding open bracket of the same type.
 

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false
 

Constraints:

1. 1 <= s.length <= 104
2. s consists of parentheses only '()[]{}'.

CODE - 
public class Solution {
   public boolean isValid(String s) {
      int length=s.length(); 
      char [] array=s.toCharArray();
      if(length==0) return true; 
      Stack<Character> stack=new Stack<Character>(); 
      for(int i=0; i<length; i++)
      {
        if(array[i]=='(' || array[i]=='{' || array[i]=='[' )
        {
          stack.push(array[i]);
        }
        if(array[i]==')' ||array[i]=='}' ||array[i]==']')
        {
          if(stack.isEmpty()) return false; 
          char temp=stack.pop(); 
          if((temp=='(' && array[i]==')' ) || (temp=='{' && array[i]=='}' ) ||(temp=='[' && array[i]==']' )  )
          {
              continue;
          }else
          {
              return false; 
          }
        }
      }
      if(!stack.isEmpty()) return false; 
      return true;        
    }
}
