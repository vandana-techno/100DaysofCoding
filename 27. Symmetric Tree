

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
    1
   / \
  2   2
 / \ / \
3  4 4  3

Input: root = [1,2,2,3,4,4,3]
Output: true

But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
  
Input: root = [1,2,2,null,3,null,3]
Output: false

 
Constraints:

1. The number of nodes in the tree is in the range [1, 1000].
2. -100 <= Node.val <= 100

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public boolean isSymmetric(TreeNode root) {
        return isMirror(root,root);
    }
    
    public boolean isMirror(TreeNode p,TreeNode q){
        
        if(p==null && q==null)return true;
        if(p==null || q==null)return false;
        
        return (p.val == q.val)
            && isMirror(p.right,q.left)
            && isMirror(p.left,q.right);
    }
}
